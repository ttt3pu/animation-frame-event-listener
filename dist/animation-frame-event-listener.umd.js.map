{"version":3,"file":"animation-frame-event-listener.umd.js","sources":["../src/animation-frame-event-listener.js"],"sourcesContent":["/**\n * @param {string} element event target\n * @param {string} eventType scroll | resize\n * @param {string} eventId any unique id(use for add/remove)\n * @param {function} callback\n*/\nexport const addAnimationFrameEventListener = (element, eventType, eventId, callback) => {\n  /**\n   * Register event props to recieved element.\n   *\n   * element.animationFrameEventListener = {\n   *   hogeEvent: {\n   *    callback: () => ...,\n   *    isRunning: boolean,\n   *   },\n   *   hugaEvent: {\n   *    callback: () => ...,\n   *    isRunning: boolean,\n   *   },\n   *   ...\n   * }\n   */\n\n  if (\n    element.animationFrameEventListener &&\n    element.animationFrameEventListener[eventId] &&\n    element.animationFrameEventListener[eventId].callback\n  ) {\n    console.error('Event id is duplicate.');\n    return;\n  }\n\n  if (!element.animationFrameEventListener) {\n    element.animationFrameEventListener = {};\n  }\n\n  element.animationFrameEventListener[eventId] = {};\n\n  const animationFrameProps = element.animationFrameEventListener[eventId];\n\n  animationFrameProps.isRunning = false;\n  animationFrameProps.eventType = eventType;\n  animationFrameProps.callback = () => {\n    if (!animationFrameProps.isRunning) {\n      animationFrameProps.isRunning = true;\n\n      window.requestAnimationFrame(() => {\n        callback();\n\n        animationFrameProps.isRunning = false;\n      });\n    }\n  };\n\n  element.addEventListener(eventType, animationFrameProps.callback, {passive: true});\n};\n\n/**\n * @param {string} element event target\n * @param {string} eventId any unique id(use for add/remove)\n*/\nexport const removeAnimationFrameEventListener = (element, eventId) => {\n  if (!element.animationFrameEventListener) {\n    return;\n  }\n\n  const animationFrameProps = element.animationFrameEventListener[eventId];\n\n  if (animationFrameProps) {\n    const {callback, eventType} = animationFrameProps;\n    element.removeEventListener(eventType, callback);\n    delete element.animationFrameEventListener[eventId];\n  }\n};\n"],"names":["element","eventType","eventId","callback","animationFrameEventListener","console","error","animationFrameProps","isRunning","window","requestAnimationFrame","addEventListener","passive","removeEventListener"],"mappings":"sRAM8C,SAACA,EAASC,EAAWC,EAASC,GAiB1E,GACEH,EAAQI,6BACRJ,EAAQI,4BAA4BF,IACpCF,EAAQI,4BAA4BF,GAASC,SAE7CE,QAAQC,MAAM,8BALhB,CASKN,EAAQI,8BACXJ,EAAQI,4BAA8B,IAGxCJ,EAAQI,4BAA4BF,GAAW,GAE/C,IAAMK,EAAsBP,EAAQI,4BAA4BF,GAEhEK,EAAoBC,WAAY,EAChCD,EAAoBN,UAAYA,EAChCM,EAAoBJ,SAAW,WACxBI,EAAoBC,YACvBD,EAAoBC,WAAY,EAEhCC,OAAOC,sBAAsB,WAC3BP,IAEAI,EAAoBC,WAAY,MAKtCR,EAAQW,iBAAiBV,EAAWM,EAAoBJ,SAAU,CAACS,SAAS,0CAO7B,SAACZ,EAASE,GACzD,GAAKF,EAAQI,4BAAb,CAIA,IAAMG,EAAsBP,EAAQI,4BAA4BF,GAE5DK,IAEFP,EAAQa,oBADsBN,EAAbN,UAAaM,EAAvBJ,iBAEAH,EAAQI,4BAA4BF"}